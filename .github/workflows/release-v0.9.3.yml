name: Create Release Binaries v0.9.3

on:
  push:
    tags:
      - 'v0.9.3*'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, zip, gd, curl
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Verify environment
      run: |
        echo "PHP Version: $(php --version)"
        echo "Node Version: $(node --version)"
        echo "NPM Version: $(npm --version)"
        echo "Composer Version: $(composer --version)"
        echo "Release Tag: ${GITHUB_REF#refs/tags/}"
        
    - name: Install PHP dependencies
      run: |
        composer install --optimize-autoloader --no-dev --no-interaction
        composer dump-autoload --optimize
      
    - name: Install Node dependencies and build assets
      run: |
        # Clear npm cache and remove lock file to handle dependency conflicts
        npm cache clean --force
        rm -f package-lock.json
        
        # Install with legacy peer deps to handle React/UI dependencies
        if ! npm install --legacy-peer-deps; then
          echo "npm install failed, trying with additional flags..."
          npm install --legacy-peer-deps --force
        fi
        
        # Install missing dependencies required by Recharts
        npm install react-is --legacy-peer-deps
        
        # Build assets with analytics dashboard
        npm run build
        
        # Verify build was successful
        if [ ! -d "public/build" ]; then
          echo "Build directory not found, something went wrong with asset compilation"
          exit 1
        fi
        
        # Verify analytics assets are included
        if [ ! -f "public/build/assets/app-"*.js ]; then
          echo "Analytics dashboard assets not found in build"
          exit 1
        fi
      
    - name: Generate checksums
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Building release for version: $VERSION (Analytics & Security Monitoring)"
        
    - name: Prepare release files
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Create releases directory
        mkdir -p releases
        
        # Create production build
        mkdir -p releases/production
        
        # Copy files excluding development directories
        rsync -av \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='storage/logs/*.log' \
          --exclude='temp-release' \
          --exclude='releases' \
          --exclude='.vscode' \
          --exclude='*.tmp' \
          . releases/production/
        
        # Ensure storage directories exist with proper structure
        mkdir -p releases/production/storage/{app/public,framework/{cache/data,sessions,views},logs}
        touch releases/production/storage/app/public/.gitkeep
        touch releases/production/storage/framework/cache/data/.gitkeep
        touch releases/production/storage/framework/sessions/.gitkeep
        touch releases/production/storage/framework/views/.gitkeep
        touch releases/production/storage/logs/.gitkeep
        
        # Set proper permissions
        chmod -R 755 releases/production
        chmod -R 777 releases/production/storage releases/production/bootstrap/cache
        
        # Laravel optimizations
        cd releases/production
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        cd ../..
        
    - name: Create release archives
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        cd releases
        
        # Production package
        zip -r "wordpress-scanner-${VERSION}-production.zip" production/
        
        # Windows package (copy from production)
        cp -r production windows
        
        # Create Windows-specific files
        cat > windows/install.bat << 'EOF'
        @echo off
        echo 🪟 Klioso Windows Installation v0.9.3
        
        echo Setting up environment...
        if not exist .env copy .env.example .env
        
        echo Generating application key...
        php artisan key:generate --force
        
        echo Running database migrations (Analytics Tables)...
        php artisan migrate --force
        
        echo Setting up analytics queue worker...
        echo @echo off > start-analytics.bat
        echo php artisan queue:work --queue=analytics --tries=3 --timeout=300 --sleep=3 >> start-analytics.bat
        
        echo Optimizing application...
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
        echo Scheduling analytics collection...
        php artisan schedule:work --fork=false &
        
        echo ✅ Installation complete!
        echo 📊 Analytics dashboard available at /analytics
        echo 🔧 Run start-analytics.bat to enable background monitoring
        echo Configure your web server to point to the 'public' directory.
        pause
        EOF
        
        cat > windows/README-WINDOWS.md << EOF
        # Klioso ${VERSION} for Windows/Laragon
        ## 🚀 Analytics & Security Monitoring Release
        
        ## 🎯 What's New in v0.9.3
        - **📊 Advanced Analytics Dashboard** - Real-time website performance monitoring
        - **🛡️ Security Monitoring** - Vulnerability tracking and alerts
        - **⚡ Performance Metrics** - Response time, uptime, and health scoring
        - **🔔 Smart Notifications** - Automated alerts for security and performance issues
        - **📈 Trend Analysis** - Historical data visualization with charts
        - **🎨 Enhanced Dark Mode** - Professional dark theme across all interfaces
        
        ## Quick Start
        1. Extract this archive to your web directory
        2. Run install.bat as Administrator
        3. Edit .env file with your database settings
        4. Run start-analytics.bat for background monitoring
        5. Access analytics at http://your-site.test/analytics
        
        ## Requirements
        - PHP 8.3+ (Laragon recommended)
        - MySQL 8+ or SQLite (for analytics storage)
        - Redis (recommended for queue processing)
        - 512MB+ PHP memory limit (for analytics processing)
        
        ## Analytics Features
        - Real-time performance monitoring
        - Security vulnerability scanning
        - SSL certificate monitoring
        - WordPress version tracking
        - Plugin/theme update detection
        - Historical trend analysis
        - Automated report generation
        
        ## Support
        Visit: https://github.com/nathanmaster/Klioso
        EOF
        
        zip -r "wordpress-scanner-${VERSION}-windows.zip" windows/
        
        # Shared hosting package
        cp -r production shared-hosting
        
        # Create shared hosting specific setup
        cat > shared-hosting/ANALYTICS-SETUP.md << EOF
        # Analytics Setup for Shared Hosting
        
        ## Database Requirements
        The analytics system requires additional database tables:
        - website_analytics (performance metrics)
        - security_audits (vulnerability tracking)
        - notifications (alert system)
        
        ## Queue Configuration
        For optimal performance, configure a queue worker:
        - Set QUEUE_CONNECTION=database in .env
        - Run: php artisan queue:work --queue=analytics
        - Or use cron job: * * * * * php /path/to/artisan schedule:run
        
        ## Memory Requirements
        Increase PHP memory limit to 512MB for analytics processing.
        
        ## Background Processing
        Analytics collection runs via Laravel jobs. Ensure queue processing is active.
        EOF
        
        cat > shared-hosting/public/.htaccess << 'EOF'
        <IfModule mod_rewrite.c>
            <IfModule mod_negotiation.c>
                Options -MultiViews -Indexes
            </IfModule>
        
            RewriteEngine On
        
            # Handle Authorization Header
            RewriteCond %{HTTP:Authorization} .
            RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
        
            # Redirect Trailing Slashes If Not A Folder...
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_URI} (.+)/$
            RewriteRule ^ %1 [L,R=301]
        
            # Send Requests To Front Controller...
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^ index.php [L]
        </IfModule>
        
        # Security headers for analytics endpoints
        <IfModule mod_headers.c>
            Header always set X-Frame-Options "SAMEORIGIN"
            Header always set X-Content-Type-Options "nosniff"
            Header always set X-XSS-Protection "1; mode=block"
            Header always set Referrer-Policy "strict-origin-when-cross-origin"
            
            # Analytics API security
            <FilesMatch "^(analytics|api)">
                Header always set Cache-Control "no-cache, no-store, must-revalidate"
            </FilesMatch>
        </IfModule>
        EOF
        
        cat > shared-hosting/README-SHARED-HOSTING.md << EOF
        # Klioso ${VERSION} for Shared Hosting
        ## 📊 Analytics & Security Monitoring Edition
        
        ## 🎯 v0.9.3 Analytics Features
        - **Real-time Dashboard** - Monitor all websites from single interface
        - **Security Auditing** - Continuous vulnerability scanning
        - **Performance Tracking** - Response time and uptime monitoring
        - **Historical Analytics** - Trend analysis with interactive charts
        - **Automated Alerts** - Email/SMS notifications for critical issues
        
        ## Installation
        1. Upload all files to your hosting account
        2. Move contents of 'public' directory to your domain's document root
        3. Edit .env file with database credentials
        4. Run migrations: php artisan migrate (creates analytics tables)
        5. Configure queue processing for background analytics
        6. Access analytics dashboard at /analytics
        
        ## Requirements
        - PHP 8.3+ with required extensions
        - MySQL 5.7+ or MariaDB 10.3+ (minimum 100MB storage for analytics)
        - SSL certificate (recommended for security features)
        - Cron job access (for scheduled analytics collection)
        - 512MB+ PHP memory limit
        
        ## Analytics Configuration
        Add to .env:
        ```
        ANALYTICS_ENABLED=true
        QUEUE_CONNECTION=database
        ANALYTICS_RETENTION_DAYS=90
        SECURITY_SCAN_FREQUENCY=daily
        ```
        
        ## Support
        Visit: https://github.com/nathanmaster/Klioso
        EOF
        
        zip -r "wordpress-scanner-${VERSION}-shared-hosting.zip" shared-hosting/
        
        # Generate checksums
        for file in wordpress-scanner-${VERSION}-*.zip; do
          if [ -f "$file" ]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        
        # Source archive (from git)
        cd ..
        git archive --format=zip --prefix="wordpress-scanner-${VERSION}/" HEAD > "releases/wordpress-scanner-${VERSION}-source.zip"
        cd releases
        sha256sum "wordpress-scanner-${VERSION}-source.zip" >> checksums.txt
        
    - name: Validate packages
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        cd releases
        
        echo "=== Release Package Validation ==="
        echo "Packages created:"
        ls -la wordpress-scanner-${VERSION}-*.zip
        
        echo -e "\n=== Package Sizes ==="
        du -h wordpress-scanner-${VERSION}-*.zip
        
        echo -e "\n=== Checksums ==="
        cat checksums.txt
        
        echo -e "\n=== Analytics Components Check ==="
        # Verify analytics components are included
        for package in wordpress-scanner-${VERSION}-production.zip wordpress-scanner-${VERSION}-windows.zip; do
          echo "Checking analytics components in $package..."
          if unzip -l "$package" | grep -q "analytics"; then
            echo "✅ Analytics components found in $package"
          else
            echo "❌ Analytics components missing in $package"
            exit 1
          fi
        done
        
        echo -e "\n=== Package Contents Verification ==="
        for package in wordpress-scanner-${VERSION}-*.zip; do
          echo "Checking $package..."
          if unzip -t "$package" > /dev/null; then
            echo "✅ $package: ZIP integrity OK"
          else
            echo "❌ $package: ZIP integrity FAILED"
            exit 1
          fi
        done
        
        echo -e "\n=== All packages validated successfully! ==="
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          releases/wordpress-scanner-${{ github.ref_name }}-production.zip
          releases/wordpress-scanner-${{ github.ref_name }}-source.zip
          releases/wordpress-scanner-${{ github.ref_name }}-windows.zip
          releases/wordpress-scanner-${{ github.ref_name }}-shared-hosting.zip
          releases/checksums.txt
        draft: false
        prerelease: false
        generate_release_notes: false
        body: |
          # 🚀 Klioso ${{ github.ref_name }} - Advanced Analytics & Security Monitoring
          
          ## 🎉 Major New Features in v0.9.3
          
          ### 📊 Advanced Analytics Dashboard
          - **Real-time Monitoring**: Live performance metrics and health scoring for all websites
          - **Interactive Charts**: Recharts-powered visualizations with trend analysis
          - **Security Overview**: Comprehensive vulnerability tracking and threat assessment
          - **Performance Metrics**: Response time monitoring, uptime tracking, SSL certificate status
          - **Historical Data**: 90-day data retention with exportable reports
          
          ### 🛡️ Enhanced Security Monitoring
          - **Vulnerability Scanner**: Automated detection of WordPress, plugin, and theme vulnerabilities
          - **Security Audits**: Comprehensive security assessments with actionable recommendations
          - **SSL Monitoring**: Certificate expiration tracking and validity checks
          - **WordPress Updates**: Version tracking and update notifications
          - **Security Alerts**: Real-time notifications for critical security issues
          
          ### 🎨 Professional Dark Mode UI
          - **Enhanced Dark Theme**: Professional dark mode design across all interfaces
          - **Modern Components**: Radix UI components with Tailwind CSS styling
          - **Responsive Design**: Optimized for desktop, tablet, and mobile devices
          - **Accessibility**: WCAG 2.1 compliant with proper contrast ratios
          
          ### ⚡ Performance Improvements
          - **Background Processing**: Laravel Queues for analytics collection and processing
          - **Database Optimization**: Indexed analytics tables for fast query performance
          - **Caching Strategy**: Smart caching for frequently accessed analytics data
          - **Memory Efficiency**: Optimized for shared hosting environments
          
          ### 📈 Analytics Features
          - **Health Scoring**: Algorithmic health scores based on multiple metrics
          - **Trend Analysis**: Historical performance tracking with visual indicators
          - **Comparative Analytics**: Compare performance across multiple websites
          - **Custom Time Ranges**: 24h, 7d, 30d, and 90d analytics views
          - **Export Functionality**: CSV/PDF reports for stakeholder sharing
          
          ## 📦 Release Packages
          
          - **`wordpress-scanner-${{ github.ref_name }}-production.zip`** - Production deployment with analytics
          - **`wordpress-scanner-${{ github.ref_name }}-windows.zip`** - Windows/Laragon with analytics setup
          - **`wordpress-scanner-${{ github.ref_name }}-shared-hosting.zip`** - Shared hosting with analytics guide
          - **`wordpress-scanner-${{ github.ref_name }}-source.zip`** - Complete source code with analytics
          - **`checksums.txt`** - SHA256 checksums for package verification
          
          ## 🏗️ System Requirements
          - **PHP**: 8.3+ (required for analytics processing)
          - **Database**: MySQL 8+ or SQLite 3+ (minimum 100MB for analytics storage)
          - **Memory**: 512MB+ PHP memory limit (increased for analytics)
          - **Storage**: 200MB+ free disk space (includes analytics data)
          - **Queue Processing**: Redis recommended, database queue supported
          
          ## ⚡ Quick Installation
          
          ### Windows/Laragon Development
          1. Download `wordpress-scanner-${{ github.ref_name }}-windows.zip`
          2. Extract to `C:\laragon\www\wordpress-scanner`
          3. Run `install.bat` as Administrator (creates analytics tables)
          4. Run `start-analytics.bat` for background monitoring
          5. Access analytics at `http://wordpress-scanner.test/analytics`
          
          ### Linux Production
          ```bash
          # Download and extract
          wget https://github.com/nathanmaster/Klioso/releases/download/${{ github.ref_name }}/wordpress-scanner-${{ github.ref_name }}-production.zip
          unzip wordpress-scanner-${{ github.ref_name }}-production.zip
          
          # Setup analytics
          php artisan migrate --force
          php artisan queue:work --queue=analytics --daemon
          ```
          
          ### Analytics Configuration
          Add to `.env`:
          ```env
          ANALYTICS_ENABLED=true
          QUEUE_CONNECTION=redis  # or database
          ANALYTICS_RETENTION_DAYS=90
          SECURITY_SCAN_FREQUENCY=daily
          NOTIFICATION_CHANNELS=mail,slack
          ```
          
          ## 🛠️ Analytics Setup
          
          ### Database Schema
          New tables created automatically:
          - `website_analytics` - Performance and health metrics
          - `security_audits` - Vulnerability and security data  
          - `notifications` - Alert and notification system
          
          ### Queue Processing
          ```bash
          # Start analytics queue worker
          php artisan queue:work --queue=analytics --tries=3 --timeout=300
          
          # Or use supervisor for production
          php artisan queue:work --queue=analytics --daemon
          ```
          
          ### Scheduled Tasks
          Add to crontab for automated analytics:
          ```bash
          * * * * * php /path/to/artisan schedule:run >> /dev/null 2>&1
          ```
          
          ## 🎯 Analytics Dashboard Features
          
          ### Main Dashboard (`/analytics`)
          - Overview cards with key metrics
          - Health score trends with interactive charts
          - Security status distribution pie charts
          - Performance metrics with historical data
          - Recent security alerts panel
          
          ### Security Analytics (`/analytics/security`)
          - Vulnerability management interface
          - Security audit results and recommendations
          - Severity-based filtering and search
          - Remediation tracking and status updates
          
          ### Performance Analytics (`/analytics/performance`)
          - Response time trend analysis
          - Uptime monitoring with downtime events
          - Website comparison tables
          - Performance recommendations engine
          
          ### Individual Website Analytics (`/analytics/website/{id}`)
          - Detailed metrics for specific websites
          - Tabbed interface (Performance, Security, Uptime, Details)
          - Historical charts and trend analysis
          - Plugin and theme update status
          
          ## ⚠️ Important Upgrade Notes
          
          - **🛡️ BACKUP YOUR DATA**: Analytics tables will be created automatically
          - **📋 Database Migrations**: Run `php artisan migrate` to create analytics schema
          - **🔄 Queue Setup Required**: Configure queue processing for background analytics
          - **💾 Increased Storage**: Analytics data requires additional database storage
          - **⚡ Memory Requirements**: Increase PHP memory limit to 512MB minimum
          
          ## 🔐 Security Enhancements
          
          - Analytics API endpoints with proper authentication
          - CSRF protection on all analytics forms
          - Rate limiting on security scan endpoints
          - Secure storage of sensitive analytics data
          - Audit logging for security-related actions
          
          ## 📊 Performance Metrics
          
          - **Health Scoring Algorithm**: Composite scores based on security, performance, and uptime
          - **Response Time Tracking**: Millisecond precision with statistical analysis
          - **Uptime Monitoring**: 99.9% accuracy with downtime event logging
          - **Security Scoring**: Risk-based scoring with vulnerability weight calculation
          
          ## 🔐 Package Verification
          
          Verify package integrity using SHA256 checksums:
          ```bash
          sha256sum -c checksums.txt
          ```
          
          ## 📞 Support & Resources
          
          - 🐛 **Bug Reports**: [GitHub Issues](https://github.com/nathanmaster/Klioso/issues)
          - 💬 **Community**: [GitHub Discussions](https://github.com/nathanmaster/Klioso/discussions)
          - 📖 **Analytics Guide**: `/docs/analytics` folder in each package
          - 🎥 **Video Tutorials**: Coming soon for analytics features
          - 📋 **Migration Guide**: [v0.9.2 to v0.9.3 Migration](https://github.com/nathanmaster/Klioso/blob/main/docs/migrations/v0.9.3.md)
          
          ---
          
          **Klioso ${{ github.ref_name }}** - Professional Analytics & Security Monitoring! 📊🛡️
          
          *This release introduces enterprise-grade analytics capabilities while maintaining the simplicity and reliability you expect.*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
