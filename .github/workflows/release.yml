name: WordPress Scanner Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.9.2)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
      create_tag:
        description: 'Create git tag if it does not exist'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.3'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, zip, gd, curl
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Verify environment
      run: |
        echo "PHP Version: $(php --version)"
        echo "Node Version: $(node --version)"
        echo "NPM Version: $(npm --version)"
        echo "Composer Version: $(composer --version)"
        echo "Release Tag: ${GITHUB_REF#refs/tags/}"
        
    - name: Install PHP dependencies
      run: |
        composer install --optimize-autoloader --no-dev --no-interaction
        composer dump-autoload --optimize
      
    - name: Install Node dependencies and build assets
      run: |
        # Clear npm cache and remove lock file to handle dependency conflicts
        npm cache clean --force
        rm -f package-lock.json
        
        # Try npm install with legacy peer deps
        if ! npm install --legacy-peer-deps; then
          echo "npm install failed, trying with additional flags..."
          npm install --legacy-peer-deps --force
        fi
        
        # Build assets
        npm run build
        
        # Verify build was successful
        if [ ! -d "public/build" ]; then
          echo "Build directory not found, something went wrong with asset compilation"
          exit 1
        fi
      
    - name: Generate checksums
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Building release for version: $VERSION"
        
    - name: Prepare release files
      run: |
        VERSION=${{ steps.version.outputs.version_number }}
        
        # Create releases directory
        mkdir -p releases
        
        # Create production build
        mkdir -p releases/production
        
        # Copy files excluding development directories
        rsync -av \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='storage/logs/*.log' \
          --exclude='temp-release' \
          --exclude='releases' \
          --exclude='.vscode' \
          --exclude='*.tmp' \
          . releases/production/
        
        # Ensure storage directories exist with proper structure
        mkdir -p releases/production/storage/{app/public,framework/{cache/data,sessions,views},logs}
        touch releases/production/storage/app/public/.gitkeep
        touch releases/production/storage/framework/cache/data/.gitkeep
        touch releases/production/storage/framework/sessions/.gitkeep
        touch releases/production/storage/framework/views/.gitkeep
        touch releases/production/storage/logs/.gitkeep
        
        # Set proper permissions
        chmod -R 755 releases/production
        chmod -R 777 releases/production/storage releases/production/bootstrap/cache
        
        # Laravel optimizations
        cd releases/production
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        cd ../..
        
    - name: Create release archives
      run: |
        VERSION=${{ steps.version.outputs.version_number }}
        cd releases
        
        # Production package
        zip -r "wordpress-scanner-${VERSION}-production.zip" production/
        
        # Windows package (copy from production)
        cp -r production windows
        
        # Create Windows-specific files
        cat > windows/install.bat << 'EOF'
        @echo off
        echo 🪟 WordPress Scanner Windows Installation
        
        echo Setting up environment...
        if not exist .env copy .env.example .env
        
        echo Generating application key...
        php artisan key:generate --force
        
        echo Running database migrations...
        php artisan migrate --force
        
        echo Optimizing application...
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
        echo ✅ Installation complete!
        echo Configure your web server to point to the 'public' directory.
        pause
        EOF
        
        cat > windows/README-WINDOWS.md << EOF
        # WordPress Scanner ${VERSION} for Windows/Laragon
        
        ## Quick Start
        1. Extract this archive to your web directory
        2. Run install.bat as Administrator
        3. Edit .env file with your database settings
        4. Access via your web server
        
        ## Requirements
        - PHP 8.2+ (Laragon recommended)
        - MySQL 8+ or SQLite
        - Composer (optional for this package)
        
        ## Support
        Visit: https://github.com/nathanmaster/laravel12
        EOF
        
        zip -r "wordpress-scanner-${VERSION}-windows.zip" windows/
        
        # Shared hosting package
        cp -r production shared-hosting
        
        # Create shared hosting .htaccess
        cat > shared-hosting/public/.htaccess << 'EOF'
        <IfModule mod_rewrite.c>
            <IfModule mod_negotiation.c>
                Options -MultiViews -Indexes
            </IfModule>
        
            RewriteEngine On
        
            # Handle Authorization Header
            RewriteCond %{HTTP:Authorization} .
            RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
        
            # Redirect Trailing Slashes If Not A Folder...
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_URI} (.+)/$
            RewriteRule ^ %1 [L,R=301]
        
            # Send Requests To Front Controller...
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^ index.php [L]
        </IfModule>
        
        # Security headers
        <IfModule mod_headers.c>
            Header always set X-Frame-Options "SAMEORIGIN"
            Header always set X-Content-Type-Options "nosniff"
        </IfModule>
        EOF
        
        cat > shared-hosting/README-SHARED-HOSTING.md << EOF
        # WordPress Scanner ${VERSION} for Shared Hosting
        
        ## Installation
        1. Upload all files to your hosting account
        2. Move contents of 'public' directory to your domain's document root
        3. Edit .env file with database credentials
        4. Run migrations via hosting control panel or SSH
        
        ## Requirements
        - PHP 8.2+ with required extensions
        - MySQL 5.7+ or MariaDB 10.3+
        - SSL certificate recommended
        
        ## Support
        Visit: https://github.com/nathanmaster/laravel12
        EOF
        
        zip -r "wordpress-scanner-${VERSION}-shared-hosting.zip" shared-hosting/
        
        # Generate checksums
        for file in wordpress-scanner-${VERSION}-*.zip; do
          if [ -f "$file" ]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        
        # Source archive (from git)
        cd ..
        git archive --format=zip --prefix="wordpress-scanner-${VERSION}/" HEAD > "releases/wordpress-scanner-${VERSION}-source.zip"
        cd releases
        sha256sum "wordpress-scanner-${VERSION}-source.zip" >> checksums.txt
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ steps.version.outputs.version }}
        RELEASE_NOTES_FILE="docs/releases/${VERSION}/RELEASE_NOTES.md"
        CHANGELOG_FILE="docs/releases/${VERSION}/CHANGELOG.md"
        
        if [ -f "$RELEASE_NOTES_FILE" ]; then
          echo "notes_file=$RELEASE_NOTES_FILE" >> $GITHUB_OUTPUT
          echo "Using structured release notes from $RELEASE_NOTES_FILE"
        elif [ -f "$CHANGELOG_FILE" ]; then
          echo "notes_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT
          echo "Using changelog from $CHANGELOG_FILE"
        else
          # Generate basic release notes
          echo "## What's Changed in $VERSION" > temp_release_notes.md
          echo "" >> temp_release_notes.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ] && [ "$LAST_TAG" != "$VERSION" ]; then
            echo "### Changes since $LAST_TAG:" >> temp_release_notes.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> temp_release_notes.md
          else
            echo "### Recent Changes:" >> temp_release_notes.md
            git log --pretty=format:"- %s (%h)" -n 20 >> temp_release_notes.md
          fi
          
          echo "" >> temp_release_notes.md
          echo "## 📦 Installation" >> temp_release_notes.md
          echo "Download the appropriate package for your environment and follow the installation instructions." >> temp_release_notes.md
          
          echo "notes_file=temp_release_notes.md" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate packages
      run: |
        VERSION=${{ steps.version.outputs.version_number }}
        cd releases
        
        echo "=== Release Package Validation ==="
        echo "Packages created:"
        ls -la wordpress-scanner-${VERSION}-*.zip
        
        echo -e "\n=== Package Sizes ==="
        du -h wordpress-scanner-${VERSION}-*.zip
        
        echo -e "\n=== Checksums ==="
        cat checksums.txt
        
        echo -e "\n=== Package Contents Verification ==="
        for package in wordpress-scanner-${VERSION}-*.zip; do
          echo "Checking $package..."
          if unzip -t "$package" > /dev/null; then
            echo "✅ $package: ZIP integrity OK"
          else
            echo "❌ $package: ZIP integrity FAILED"
            exit 1
          fi
        done
        
        echo -e "\n=== All packages validated successfully! ==="
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: WordPress Scanner ${{ steps.version.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.notes_file }}
        files: |
          releases/wordpress-scanner-${{ steps.version.outputs.version_number }}-production.zip
          releases/wordpress-scanner-${{ steps.version.outputs.version_number }}-source.zip
          releases/wordpress-scanner-${{ steps.version.outputs.version_number }}-windows.zip
          releases/wordpress-scanner-${{ steps.version.outputs.version_number }}-shared-hosting.zip
          releases/checksums.txt
        draft: false
        prerelease: ${{ github.event.inputs.release_type == 'prerelease' || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        body: |
          # 🚀 Klioso ${{ github.ref_name }} - Multi-Service Provider System
          
          ## 🎉 What's New in This Release
          
          ### 🔄 Multi-Service Provider System
          - **Flexible Provider Management**: Providers can now offer multiple services independently
            - ✅ **Hosting** - Web hosting services
            - ✅ **DNS** - Domain name system management  
            - ✅ **Email** - Email hosting and management
            - ✅ **Domain Registration** - Domain registration services
          - **Service-Specific Selection**: Choose different providers for different services per website
          - **Visual Service Badges**: Clear indicators showing which services each provider offers
          
          ### 🔗 Optional Client Relationships
          - **Flexible Website Management**: Websites no longer require assigned clients
          - **Internal Sites Support**: Perfect for development, staging, and internal websites
          - **Clear UI Indicators**: Visual cues for websites without assigned clients
          
          ### � Responsive Interface Overhaul
          - **Mobile-First Design**: Fully responsive tables that transform into card layouts on mobile
          - **Clean Navigation**: Removed sidebar clutter in favor of streamlined header navigation
          - **Smart Pagination**: Configurable page sizes with smooth navigation
          - **Click-to-Sort**: Interactive table headers for instant data sorting
          
          ### 🔍 WordPress Scanner Enhancements
          - **Better Error Handling**: Graceful handling of unreachable or misconfigured sites
          - **SSL Support**: Automatic detection and handling of HTTPS/HTTP sites
          - **Enhanced Detection**: Improved plugin and theme identification algorithms
          
          ## 📦 Release Packages
          
          - **`klioso-${{ github.ref_name }}-production.zip`** - Production-ready deployment package
          - **`klioso-${{ github.ref_name }}-windows.zip`** - Windows/Laragon optimized with install.bat
          - **`klioso-${{ github.ref_name }}-shared-hosting.zip`** - cPanel/shared hosting ready
          - **`klioso-${{ github.ref_name }}-source.zip`** - Complete source code archive
          - **`checksums.txt`** - SHA256 checksums for package verification
          
          ## 🏗️ System Requirements
          - **PHP**: 8.2+ (8.3 recommended)
          - **Database**: MySQL 8+ or SQLite 3+
          - **Web Server**: Apache 2.4+ or Nginx 1.18+
          - **Memory**: 256MB+ PHP memory limit
          - **Storage**: 50MB+ free disk space
          
          ## � Quick Installation
          
          ### Windows/Laragon (Recommended for development)
          1. Download `klioso-${{ github.ref_name }}-windows.zip`
          2. Extract to `C:\laragon\www\klioso`
          3. Run `install.bat` as Administrator
          4. Configure database in `.env` file
          5. Access via `http://klioso.test`
          
          ### Linux Production
          1. Download `klioso-${{ github.ref_name }}-production.zip`
          2. Extract to your server directory
          3. Configure web server to point to `public/` directory
          4. Set up `.env` file with production settings
          5. Run `php artisan migrate`
          
          ### Shared Hosting
          1. Download `klioso-${{ github.ref_name }}-shared-hosting.zip`
          2. Upload files to your hosting account
          3. Move `public/` contents to document root
          4. Configure database via hosting control panel
          
          ## ⚠️ Important Notes
          
          - **🛡️ BACKUP YOUR DATA**: This release includes significant database schema changes
          - **📋 Database Migrations Required**: Run `php artisan migrate` after installation
          - **🧪 Beta Release**: While extensively tested, use caution in production environments
          - **🔄 Breaking Changes**: Provider relationships and UI layout have been restructured
          
          ## 🔐 Package Verification
          
          Verify package integrity using SHA256 checksums in `checksums.txt`:
          ```bash
          sha256sum -c checksums.txt
          ```
          
          ## 📞 Support & Feedback
          
          - 🐛 **Bug Reports**: [GitHub Issues](https://github.com/nathanmaster/laravel12/issues)
          - 💬 **Discussions**: [GitHub Discussions](https://github.com/nathanmaster/laravel12/discussions)
          - 📖 **Documentation**: Check `/docs` folder in each package
          - 📋 **Full Changelog**: [CHANGELOG.md](https://github.com/nathanmaster/laravel12/blob/main/CHANGELOG.md)
          
          ---
          
          **Klioso ${{ github.ref_name }}** - Taking WordPress management to the next level! 🚀
          
          *While extensively tested, this is a beta release. Please maintain current backups and test thoroughly before production use.*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in files
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Update composer.json version
        if [ -f "composer.json" ]; then
          jq '.version = "${{ steps.version.outputs.version_number }}"' composer.json > composer.json.tmp && mv composer.json.tmp composer.json
        fi
        
        # Update package.json version
        if [ -f "package.json" ]; then
          jq '.version = "${{ steps.version.outputs.version_number }}"' package.json > package.json.tmp && mv package.json.tmp package.json
        fi
        
        # Commit version updates
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add -A
        if ! git diff --staged --quiet; then
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push origin ${{ github.ref_name }}
        fi

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build documentation
        run: |
          echo "Building documentation for GitHub Pages..."
          # Copy release documentation to docs root for GitHub Pages
          if [ -d "docs/releases" ]; then
            cp -r docs/releases docs/_releases 2>/dev/null || true
          fi
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: false

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [create-release, deploy]
    if: always()

    steps:
      - name: Notify Success
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.create-release.outputs.version || github.ref_name }} created successfully!"
          
      - name: Notify Failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ Release failed!"
