#!/bin/bash

# Klioso Deployment Readiness Checker
# Run this script to verify your application is ready for production deployment

echo "üîç Klioso Deployment Readiness Check"
echo "===================================="

ERRORS=0

# Check if we're in the right directory
if [ ! -f "artisan" ]; then
    echo "‚ùå Not in Laravel project root"
    exit 1
fi

echo "‚úÖ Laravel project detected"

# Check for required files
echo ""
echo "üìÅ Checking required files..."

required_files=(
    ".env.production"
    "config/features.php" 
    "app/Services/FeatureService.php"
    "app/Http/Middleware/CheckFeature.php"
    "resources/js/Hooks/useFeatures.js"
    "resources/js/Components/FeatureWrapper.jsx"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå Missing: $file"
        ERRORS=$((ERRORS + 1))
    fi
done

# Check build process
echo ""
echo "üî® Testing build process..."
if npm run build > /dev/null 2>&1; then
    echo "‚úÖ Frontend build successful"
else
    echo "‚ùå Frontend build failed"
    ERRORS=$((ERRORS + 1))
fi

# Check for syntax errors
echo ""
echo "üîç Checking for syntax errors..."
if php artisan route:list > /dev/null 2>&1; then
    echo "‚úÖ No PHP syntax errors"
else
    echo "‚ùå PHP syntax errors detected"
    ERRORS=$((ERRORS + 1))
fi

# Check feature configuration
echo ""
echo "‚öôÔ∏è Checking feature configuration..."
if php -r "
try {
    require 'vendor/autoload.php';
    \$app = require_once 'bootstrap/app.php';
    \$features = \$app['config']['features'];
    echo 'Features loaded: ' . count(\$features, COUNT_RECURSIVE) . ' settings' . PHP_EOL;
} catch (Exception \$e) {
    echo 'Error: ' . \$e->getMessage() . PHP_EOL;
    exit(1);
}
"; then
    echo "‚úÖ Feature configuration valid"
else
    echo "‚ùå Feature configuration invalid"
    ERRORS=$((ERRORS + 1))
fi

# Check for development dependencies in composer.lock
echo ""
echo "üì¶ Checking dependencies..."
if grep -q '"dev":' composer.lock; then
    echo "‚ö†Ô∏è  Development dependencies detected (use --no-dev in production)"
else
    echo "‚úÖ Production dependencies only"
fi

# Check environment variables
echo ""
echo "üåç Checking environment variables..."
if [ -f ".env" ]; then
    if grep -q "APP_DEBUG=true" .env; then
        echo "‚ö†Ô∏è  APP_DEBUG is true (should be false in production)"
    else
        echo "‚úÖ APP_DEBUG configuration looks good"
    fi
    
    if grep -q "APP_URL=http://localhost" .env; then
        echo "‚ö†Ô∏è  APP_URL still set to localhost"
    else
        echo "‚úÖ APP_URL configuration looks good"
    fi
else
    echo "‚ùå No .env file found"
    ERRORS=$((ERRORS + 1))
fi

# Security checks
echo ""
echo "üîí Security checks..."
if [ -f ".env" ] && [ -n "$(grep 'APP_KEY=' .env | cut -d'=' -f2)" ]; then
    echo "‚úÖ APP_KEY is set"
else
    echo "‚ùå APP_KEY not set"
    ERRORS=$((ERRORS + 1))
fi

# Performance checks
echo ""
echo "‚ö° Performance checks..."
if [ -d "bootstrap/cache" ] && [ "$(ls -A bootstrap/cache)" ]; then
    echo "‚úÖ Bootstrap cache exists"
else
    echo "‚ö†Ô∏è  No bootstrap cache (run config:cache)"
fi

# Final summary
echo ""
echo "üìä DEPLOYMENT READINESS SUMMARY"
echo "==============================="

if [ $ERRORS -eq 0 ]; then
    echo "üéâ READY FOR DEPLOYMENT!"
    echo ""
    echo "‚úÖ All critical checks passed"
    echo "‚úÖ Application appears stable"
    echo "‚úÖ Feature flags configured"
    echo "‚úÖ Build process working"
    echo ""
    echo "üöÄ You can proceed with deployment using:"
    echo "   ./scripts/deploy-safe.sh production"
else
    echo "‚ùå NOT READY FOR DEPLOYMENT"
    echo ""
    echo "Found $ERRORS critical issues that need to be resolved."
    echo "Please fix the issues marked with ‚ùå before deploying."
fi

exit $ERRORS